#+STARTUP: overview
#+TITLE: .emacs.d file

* Interface tweaks
** Personal information

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Zhang Luping"
       user-mail-address "rolf.cheung@gmail.com")

#+END_SRC

** Sensible-defaults.el for some basic settings

#+BEGIN_SRC emacs-lisp

  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)

#+END_SRC

** Open myinit conveniently

#+BEGIN_SRC emacs-lisp

  ;; Open myinit.org
  (defun open-init-file()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "<f2>") 'open-init-file)

  ;; Open gcal.org
  (defun open-gcal-file()
    (interactive)
    (find-file "~/Documents/gtd/gcal.org"))

  (global-set-key (kbd "<f3>") 'open-gcal-file)

#+END_SRC

** Fix for mac
#+BEGIN_SRC emacs-lisp

;; Emacs on Mac somethimes can't find installed programs, i.e. PATH problem.
;; This fixes that. Forked from jabranham/emacs-for-social-science
(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'adwaita t)
  (require 'diminish)                ;; if you use :diminish

  ;; Disable scroll bar, disable the toolbar completely and set initial
  ;; frame parameters.
  (when window-system
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (setq default-frame-alist
          '((font . "Inconsolata-12")))
  )

  (setq linum-format "%4d")
  (defun my-linum-mode-hook ()
    (linum-mode t))

  (add-hook 'find-file-hook 'my-linum-mode-hook)

  ;; Wrap around nicely. The default behavior wraps in the middle of a
  ;; word.
  (global-visual-line-mode)

  (setq-default line-spacing 0.5)

  (when window-system
    (set-frame-position (selected-frame) 130 0)
    (set-frame-size (selected-frame) 160 50))
#+END_SRC
* Org-mode
** Basic settings

#+BEGIN_SRC emacs-lisp
  ;; Key binding
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)

  ;; Use current window editing a code block
  (setq org-src-window-setup 'current-window)

  ;; use syntax highlighting in org-file code blocks
  (setq org-src-fontify-natively t)

  ;;Tag alignment position on the right.
  ;;(setq org-tags-column '-110)

  ;; Enable beamer options when click "C-x C-e"
  (use-package ox-beamer)

   ;; A cleaner outline view
  (use-package org
    :config
    (setq org-startup-indented t))

  ;; Exporting to PDF with syntax highlighting in the code, Pygments may be needed
  ;;(use-package ox-latex
  ;;  :config
  ;;  (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;;  (setq org-latex-listings 'minted))

  ;;(setq org-latex-pdf-process
  ;;      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC
** Babel

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((latex . t)
      (python . t)
      (org . t)
      (emacs-lisp . t)))

#+END_SRC
** Agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Documents/gtd/gcal.org"
                           "~/Documents/gtd/project.org"))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [gcal]" entry
                                 (file+headline "~/Documents/gtd/gcal.org" "Tasks")
                                 "* TODO %? %^G\n:PROPERTIES:\n\n:END:\nSCHEDULED: %^T\n %i\n")

                                ("w" "Working Paper [project]" entry
                                 (file+headline "~/Documents/gtd/project.org" "Working Paper")
                                 "* TODO %?\n:PROPERTIES:\n\n:END:\nSCHEDULED:%^t DEADLINE: %^t %i\n")

                                ("l" "Life Change [project]" entry
                                 (file+headline "~/Documents/gtd/project.org" "Life Change")
                                 "* TODO %?\n:PROPERTIES:\n\n:END:\nSCHEDULED:%^T  %i\n")

                                ("p" "Paper Reading [project]" entry
                                 (file+headline "~/Documents/gtd/project.org" "Paper Reading")
                                 "* TODO %?\n:PROPERTIES:\n\n:END:\nSCHEDULED: %^T %i\n")

                                ("r" "Research [notes]" entry
                                 (file+headline "~/Documents/gtd/notes.org" "Research")
                                 "* Note %?\n%T")

                                ("y" "Python [notes]" entry
                                 (file+headline "~/Documents/gtd/notes.org" "Python")
                                 "* Note %?\n%T")

                                ("e" "Emacs [notes]" entry
                                 (file+headline "~/Documents/gtd/notes.org" "Emacs")
                                 "* Note %?\n%T")

                                ))
#+END_SRC

** todo keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

#+END_SRC
** tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("Reserch" . ?r)
                        ("LifeChange" . ?l)
                        ("@Boss" . ?b)
                        ("@Family" . ?f)
                        ("@Pal" . ?p)
                        ("Others" . ?o)))
  (setq org-tags-column -80)
  (setq org-tag-faces '(("Reserch" :foreground "orange" :underline t :weight bold)
                        ("Others" :foreground "blue")
                        ("LifeChange" :foregound "#f7fcb9")
                        ("@Boss" :foreground "lime green" :underline t :weight bold)
                        ("@Pal" :foreground "purple")
                        ("@Family" :foreground "#dd1c77" :underline t :weight bold)))
#+END_SRC
* Latex

;;[[https://github.com/aculich/.emacs.d.git][Stolen from Aaron Culich]]
#+BEGIN_SRC emacs-lisp
  ;;; LaTeX with AUCTeX
  (use-package tex-site                   ; AUCTeX initialization
    :ensure auctex)

  (use-package tex                        ; TeX editing/processing
    :ensure auctex
    :defer t
    :config
    (setq TeX-parse-self t                ; Parse documents to provide completion
                                          ; for packages, etc.
          TeX-auto-save t                 ; Automatically save style information
          TeX-electric-sub-and-superscript t ; Automatically insert braces after
                                          ; sub- and superscripts in math mode
          TeX-electric-math '("\\(" "\\)")
          ;; Don't insert magic quotes right away.
          TeX-quote-after-quote t
          ;; Don't ask for confirmation when cleaning
          TeX-clean-confirm nil
          ;; Provide forward and inverse search with SyncTeX
          TeX-source-correlate-mode t
          TeX-source-correlate-method 'synctex)
    (setq-default TeX-master nil          ; Ask for the master file
                  TeX-engine 'xetex      ; Use a modern engine
                  ;; Redundant in 11.88, but keep for older AUCTeX
                  TeX-PDF-mode t)

    ;; Move to chktex
    (setcar (cdr (assoc "Check" TeX-command-list)) "chktex -v6 %s"))

  (use-package tex-buf                    ; TeX buffer management
    :ensure auctex
    :defer t
    ;; Don't ask for confirmation when saving before processing
    :config (setq TeX-save-query nil))

  (use-package tex-style                  ; TeX style
    :ensure auctex
    :defer t
    :config
    ;; Enable support for csquotes
    (setq LaTeX-csquotes-close-quote "}"
          LaTeX-csquotes-open-quote "\\enquote{"))

  (use-package tex-fold                   ; TeX folding
    :ensure auctex
    :defer t
    :init (add-hook 'TeX-mode-hook #'TeX-fold-mode))

  (use-package tex-mode                   ; TeX mode
    :ensure auctex
    :defer t
    :config
    (font-lock-add-keywords 'latex-mode
                            `((,(rx "\\"
                                    symbol-start
                                    "fx" (1+ (or (syntax word) (syntax symbol)))
                                    symbol-end)
                               . font-lock-warning-face))))

  (use-package latex                      ; LaTeX editing
    :ensure auctex
    :defer t
    :config
    ;; Teach TeX folding about KOMA script sections
    (setq TeX-outline-extra `((,(rx (0+ space) "\\section*{") 2)
                              (,(rx (0+ space) "\\subsection*{") 3)
                              (,(rx (0+ space) "\\subsubsection*{") 4)
                              (,(rx (0+ space) "\\minisec{") 5))
          ;; No language-specific hyphens please
          LaTeX-babel-hyphen nil)

    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode))    ; Easy math input

  (use-package auctex-latexmk             ; latexmk command for AUCTeX
    :ensure t
    :defer t
    :after latex
    :config (auctex-latexmk-setup))

  (use-package auctex-skim                ; Skim as viewer for AUCTeX
    :load-path "lisp/"
    :commands (auctex-skim-select)
    :after tex
    :config (auctex-skim-select))

  (use-package bibtex                     ; BibTeX editing
    :defer t
    :config
    ;; Run prog mode hooks for bibtex
    (add-hook 'bibtex-mode-hook (lambda () (run-hooks 'prog-mode-hook)))

    ;; Use a modern BibTeX dialect
    (bibtex-set-dialect 'biblatex))

  (defun lunaryorn-reftex-find-ams-environment-caption (environment)
    "Find the caption of an AMS ENVIRONMENT."
    (let ((re (rx-to-string `(and "\\begin{" ,environment "}"))))
      ;; Go to the beginning of the label first
      (re-search-backward re)
      (goto-char (match-end 0)))
    (if (not (looking-at (rx (zero-or-more space) "[")))
        (error "Environment %s has no title" environment)
      (let ((beg (match-end 0)))
        ;; Move point onto the title start bracket and move over to the end,
        ;; skipping any other brackets in between, and eventually extract the text
        ;; between the brackets
        (goto-char (1- beg))
        (forward-list)
        (buffer-substring-no-properties beg (1- (point))))))

  (use-package reftex                     ; TeX/BibTeX cross-reference management
    :defer t
    :init (add-hook 'LaTeX-mode-hook #'reftex-mode)
    :config
    ;; Plug into AUCTeX
    (setq reftex-plug-into-AUCTeX t
          ;; Automatically derive labels, and prompt for confirmation
          reftex-insert-label-flags '(t t)
          reftex-label-alist
          '(
            ;; Additional label definitions for RefTeX.
            ("definition" ?d "def:" "~\\ref{%s}"
             lunaryorn-reftex-find-ams-environment-caption
             ("definition" "def.") -3)
            ("theorem" ?h "thm:" "~\\ref{%s}"
             lunaryorn-reftex-find-ams-environment-caption
             ("theorem" "th.") -3)
            ("example" ?x "ex:" "~\\ref{%s}"
             lunaryorn-reftex-find-ams-environment-caption
             ("example" "ex") -3)
            ;; Algorithms package
            ("algorithm" ?a "alg:" "~\\ref{%s}"
             "\\\\caption[[{]" ("algorithm" "alg") -3)))

    ;; Provide basic RefTeX support for biblatex
    (unless (assq 'biblatex reftex-cite-format-builtin)
      (add-to-list 'reftex-cite-format-builtin
                   '(biblatex "The biblatex package"
                              ((?\C-m . "\\cite[]{%l}")
                               (?t . "\\textcite{%l}")
                               (?a . "\\autocite[]{%l}")
                               (?p . "\\parencite{%l}")
                               (?f . "\\footcite[][]{%l}")
                               (?F . "\\fullcite[]{%l}")
                               (?x . "[]{%l}")
                               (?X . "{%l}"))))
      (setq reftex-cite-format 'biblatex))
    :diminish reftex-mode)

#+END_SRC
* python
[[https://github.com/MassimoLauria/dotemacs.git][Copy from MassimoLauria]]
#+BEGIN_SRC emacs-lisp
  ;; use IPython

  (when (and (executable-find "ipython")
             (version<= "24.3" emacs-version))

    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt --pprint"
          python-shell-completion-native-enable nil
          ))


  ;; Code analysis
  (use-package anaconda-mode
    :ensure t
    :diminish t
    :commands anaconda-mode
    :init '(add-hook 'python-mode-hook 'anaconda-mode)
    :config
    (define-key anaconda-mode-map  (kbd "M-/") 'anaconda-mode-show-doc)
    (define-key anaconda-mode-map  (kbd "M-.") 'anaconda-mode-find-definitions)
    (define-key anaconda-mode-map  (kbd "M-,") 'anaconda-mode-go-back)
    (define-key anaconda-mode-map  (kbd "M-r") nil))
#+End_SRC
* Packages
** ace-window

#+BEGIN_SRC emacs-lisp

  ;; Switch between windows in a fancy way
  (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-scope 'frame)
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

#+END_SRC

** counsel/ivy/swiper

;; ido alternative

#+BEGIN_SRC emacs-lisp

  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)))

#+END_SRC
** ignoroamus
;;[[https://github.com/aculich/.emacs.d.git][Stolen from Aaron Culich]]
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)

  (use-package ignoramus                  ; Ignore uninteresting files everywhere
    :ensure t
    :config
    ;; Ignore some additional directories and file extensions
    (dolist (name '(".cask"
                    ".vagrant"
                    ".ensime_cache" ".ensime"
                    ".stack-work"))
      ;; Ignore some additional directories
      (add-to-list 'ignoramus-file-basename-exact-names name))

    (dolist (ext '(".DS_Store" ".localized" ;mac ox
                   ".fls" ".out" ".aux" ".bcf" ".blg"
                   ".fdb_latexmk" ".fls" ".log" ".nav"
                   ".run.xml" ".snm" ".tex~" ".toc"
                   ".vrb" "xdv" ".spl"; LaTeX
                   ))
      (add-to-list 'ignoramus-file-endings ext))

    (ignoramus-setup))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters         ; Highlight delimiters by depth
    :ensure t
    :defer t
    :init
    (dolist (hook '(text-mode-hook prog-mode-hook))
      (add-hook hook #'rainbow-delimiters-mode)))

#+END_SRC
** rainbow-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package rainbow-mode               ; Fontify color values in code
  ;;   :ensure t
  ;;   :bind (("C-c t r" . rainbow-mode))
  ;;   :config (add-hook 'css-mode-hook #'rainbow-mode))

#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet                  ; Snippets
    :ensure t
    :defer t
    :init
    (yas-global-mode 1)
    :diminish (yas-minor-mode . " Ⓨ"))

#+END_SRC
